package com.lttclaw.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lttclaw.greendao.account;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ACCOUNT.
*/
public class accountDao extends AbstractDao<account, Long> {

    public static final String TABLENAME = "ACCOUNT";

    /**
     * Properties of entity account.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Category = new Property(1, String.class, "category", false, "CATEGORY");
        public final static Property Imguri = new Property(2, String.class, "imguri", false, "IMGURI");
        public final static Property Provider = new Property(3, String.class, "provider", false, "PROVIDER");
        public final static Property Uname = new Property(4, String.class, "uname", false, "UNAME");
        public final static Property Shadow = new Property(5, String.class, "shadow", false, "SHADOW");
        public final static Property SetDate = new Property(6, java.util.Date.class, "setDate", false, "SET_DATE");
    };


    public accountDao(DaoConfig config) {
        super(config);
    }
    
    public accountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ACCOUNT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CATEGORY' TEXT," + // 1: category
                "'IMGURI' TEXT," + // 2: imguri
                "'PROVIDER' TEXT," + // 3: provider
                "'UNAME' TEXT NOT NULL ," + // 4: uname
                "'SHADOW' TEXT," + // 5: shadow
                "'SET_DATE' INTEGER);"); // 6: setDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ACCOUNT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, account entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(2, category);
        }
 
        String imguri = entity.getImguri();
        if (imguri != null) {
            stmt.bindString(3, imguri);
        }
 
        String provider = entity.getProvider();
        if (provider != null) {
            stmt.bindString(4, provider);
        }
        stmt.bindString(5, entity.getUname());
 
        String shadow = entity.getShadow();
        if (shadow != null) {
            stmt.bindString(6, shadow);
        }
 
        java.util.Date setDate = entity.getSetDate();
        if (setDate != null) {
            stmt.bindLong(7, setDate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public account readEntity(Cursor cursor, int offset) {
        account entity = new account( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // category
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imguri
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // provider
            cursor.getString(offset + 4), // uname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // shadow
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // setDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, account entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategory(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImguri(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProvider(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUname(cursor.getString(offset + 4));
        entity.setShadow(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSetDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(account entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(account entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
